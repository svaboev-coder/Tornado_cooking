import datetime
from typing import Dict, List, Any, Optional
from telebot import types
from database import db_manager
from sqlite_backup import sqlite_backup_manager
import logging

logger = logging.getLogger(__name__)


class RegistrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.registration_steps = {
            'start': self.step_start,
            'select_building': self.step_select_building,
            'select_room': self.step_select_room,
            'enter_name': self.step_enter_name,
            'enter_dates': self.step_enter_dates,
            'enter_end_date': self.step_enter_end_date,
            'confirm_dates': self.step_confirm_dates,
            'date_conflict': self.step_date_conflict,
            'enter_meals_for_day': self.step_enter_meals_for_day,
            'confirm_registration': self.step_confirm_registration,
            'complete': self.step_complete
        }
    
    def get_available_rooms(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        try:
            if db_manager.demo_mode:
                return ["–∫1/1", "–∫1/2", "–∫2/1", "–ë1/1", "–ë1/2"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if not db_manager.is_connected():
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                db_manager.connect()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            rooms_data = db_manager.get_table_data("—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫_–Ω–æ–º–µ—Ä–æ–≤", 100)
            return [room['–Ω–æ–º–µ—Ä'] for room in rooms_data]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤: {e}")
            return []
    
    def get_available_buildings(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤"""
        try:
            rooms = self.get_available_rooms()
            buildings = set()
            
            for room in rooms:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–ø—É—Å –∏–∑ –Ω–æ–º–µ—Ä–∞ (—á–∞—Å—Ç—å –¥–æ "/")
                if '/' in room:
                    building = room.split('/')[0]
                    buildings.add(building)
            
            return sorted(list(buildings))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–æ–≤: {e}")
            return []
    
    def get_rooms_in_building(self, building: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ"""
        try:
            rooms = self.get_available_rooms()
            building_rooms = []
            
            for room in rooms:
                if room.startswith(building + '/'):
                    building_rooms.append(room)
            
            return sorted(building_rooms)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –≤ –∫–æ—Ä–ø—É—Å–µ {building}: {e}")
            return []
    
    def step_start(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–ù–∞—á–∞–ª—å–Ω—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user_state.current_step = 'select_building'
        user_state.registration_data.clear()
        
        buildings = self.get_available_buildings()
        if not buildings:
            return 'error', '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–ø—É—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', None
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for building in buildings:
            markup.add(types.KeyboardButton(building))
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        text = (
            "üè® <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ</b>\n\n"
            "–®–∞–≥ 1 –∏–∑ 6: –í—ã–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å:"
        )
        
        return 'select_building', text, markup
    
    def step_select_building(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–®–∞–≥ –≤—ã–±–æ—Ä–∞ –∫–æ—Ä–ø—É—Å–∞"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        building = message.text.strip()
        buildings = self.get_available_buildings()
        
        if building not in buildings:
            return 'select_building', "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", None
        
        user_state.registration_data['building'] = building
        user_state.current_step = 'select_room'
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ
        rooms = self.get_rooms_in_building(building)
        if not rooms:
            return 'error', f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –∫–æ—Ä–ø—É—Å–µ {building}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for room in rooms:
            markup.add(types.KeyboardButton(room))
        markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–ø—É—Å–∞–º"))
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        text = (
            f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å: <b>{building}</b>\n\n"
            "–®–∞–≥ 1 –∏–∑ 6: –í—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –∫–æ—Ä–ø—É—Å–µ {building}:"
        )
        
        return 'select_room', text, markup
    
    def step_select_room(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–®–∞–≥ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–ø—É—Å–∞–º":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ—Ä–ø—É—Å–∞
            return self.step_start(message, user_state)
        
        room = message.text.strip()
        building = user_state.registration_data.get('building', '')
        rooms = self.get_rooms_in_building(building)
        
        if room not in rooms:
            return 'select_room', f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ—Ä–ø—É—Å–∞ {building}:", None
        
        user_state.registration_data['room'] = room
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        user_state.registration_data.pop('date_conflict', None)
        user_state.current_step = 'enter_name'
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        text = (
            f"‚úÖ –í—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä: <b>{room}</b>\n\n"
            "–®–∞–≥ 2 –∏–∑ 6: –í–≤–æ–¥ –∏–º–µ–Ω–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):"
        )
        
        return 'enter_name', text, markup
    
    def step_enter_name(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–®–∞–≥ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        name = message.text.strip()
        if len(name) < 2:
            return 'enter_name', "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", None
        
        user_state.registration_data['name'] = name
        user_state.current_step = 'enter_dates'
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        text = (
            f"‚úÖ –ò–º—è: <b>{name}</b>\n\n"
            "–®–∞–≥ 3 –∏–∑ 6: –î–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.08.2024"
        )
        
        return 'enter_dates', text, markup
    
    def step_enter_dates(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–®–∞–≥ –≤–≤–æ–¥–∞ –¥–∞—Ç"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –≤–≤–æ–¥–µ –¥–∞—Ç
        user_state.registration_data.pop('date_conflict', None)
        
        try:
            start_date = datetime.datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
            today = datetime.date.today()
            
            if start_date < today:
                return 'enter_dates', "‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:", None
            
            user_state.registration_data['start_date'] = start_date
            user_state.current_step = 'enter_end_date'
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            
            text = (
                f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: <b>{start_date.strftime('%d.%m.%Y')}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.08.2024"
            )
            
            return 'enter_end_date', text, markup
            
        except ValueError:
            return 'enter_dates', "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:", None
    
    def step_enter_end_date(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–®–∞–≥ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        try:
            end_date = datetime.datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
            start_date = user_state.registration_data['start_date']
            
            if end_date <= start_date:
                return 'enter_end_date', "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", None
            
            user_state.registration_data['end_date'] = end_date
            user_state.current_step = 'confirm_dates'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç
            date_range = []
            current_date = start_date
            while current_date <= end_date:
                date_range.append(current_date)
                current_date += datetime.timedelta(days=1)
            
            user_state.registration_data['date_range'] = date_range
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
            markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            
            text = (
                f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{end_date.strftime('%d.%m.%Y')}</b>\n\n"
                f"üìÖ <b>–ü–µ—Ä–∏–æ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b>\n"
                f"–° {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}\n"
                f"–í—Å–µ–≥–æ –¥–Ω–µ–π: {len(date_range)}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"
            )
            
            return 'confirm_dates', text, markup
            
        except ValueError:
            return 'enter_end_date', "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:", None
    
    def step_confirm_dates(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–®–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞—Ç"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        if message.text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            return 'confirm_dates', "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∞':", None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–∞—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
        room = user_state.registration_data.get('room', '')
        start_date = user_state.registration_data.get('start_date')
        end_date = user_state.registration_data.get('end_date')
        
        if room and start_date and end_date:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conflicts = db_manager.check_date_conflicts(
                room, 
                start_date.strftime('%Y-%m-%d'), 
                end_date.strftime('%Y-%m-%d')
            )
            
            if conflicts:
                # –ï—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã
                conflict_text = "‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏:</b>\n\n"
                conflict_text += f"üè® –ù–æ–º–µ—Ä: <b>{room}</b>\n"
                conflict_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: <b>{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}</b>\n\n"
                conflict_text += "üìã <b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ:</b>\n"
                
                for conflict in conflicts:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º datetime
                    if isinstance(conflict['–¥–∞—Ç–∞'], str):
                        conflict_date = datetime.datetime.strptime(conflict['–¥–∞—Ç–∞'], '%Y-%m-%d').strftime('%d.%m.%Y')
                    else:
                        conflict_date = conflict['–¥–∞—Ç–∞'].strftime('%d.%m.%Y')
                    conflict_text += f"‚Ä¢ {conflict_date} - {conflict['–§–ò–û']}\n"
                
                conflict_text += "\n‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –∏–∑-–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–∞—Ç.</b>\n"
                conflict_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –Ω–æ–º–µ—Ä."
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–≤–æ–¥—É –¥–∞—Ç
                user_state.registration_data['date_conflict'] = True
                user_state.current_step = 'enter_dates'
                
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã"))
                markup.add(types.KeyboardButton("üè® –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"))
                markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                
                return 'date_conflict', conflict_text, markup
        
        # –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        user_state.registration_data['daily_meals'] = {}
        user_state.registration_data['current_day_index'] = 0
        user_state.current_step = 'enter_meals_for_day'
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("0 0 0 0 0 0"))
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É
        date_range = user_state.registration_data['date_range']
        current_date = date_range[0]
        
        text = (
            f"‚úÖ <b>–î–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤!</b>\n\n"
            f"–®–∞–≥ 4 –∏–∑ 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏\n\n"
            f"üìÖ <b>–î–µ–Ω—å {user_state.registration_data['current_day_index'] + 1} –∏–∑ {len(date_range)}</b>\n"
            f"–î–∞—Ç–∞: <b>{current_date.strftime('%d.%m.%Y')}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è.\n\n"
            "<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:</b> 6 —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
            "<b>–ü–æ—Ä—è–¥–æ–∫:</b> –≤–∑—Ä–æ—Å–ª—ã–µ –∑–∞–≤—Ç—Ä–∞–∫, –¥–µ—Ç–∏ –∑–∞–≤—Ç—Ä–∞–∫, –≤–∑—Ä–æ—Å–ª—ã–µ –æ–±–µ–¥, –¥–µ—Ç–∏ –æ–±–µ–¥, –≤–∑—Ä–æ—Å–ª—ã–µ —É–∂–∏–Ω, –¥–µ—Ç–∏ —É–∂–∏–Ω\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> 2 1 2 1 2 0\n"
            "(2 –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ 1 —Ä–µ–±–µ–Ω–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫, 2 –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ 1 —Ä–µ–±–µ–Ω–æ–∫ –Ω–∞ –æ–±–µ–¥, 2 –≤–∑—Ä–æ—Å–ª—ã—Ö –∏ 0 –¥–µ—Ç–µ–π –Ω–∞ —É–∂–∏–Ω)\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:"
        )
        
        return 'enter_meals_for_day', text, markup

    def step_date_conflict(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –¥–∞—Ç"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        if message.text == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –¥–∞—Ç
            user_state.current_step = 'enter_dates'
            user_state.registration_data.pop('date_conflict', None)  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            
            text = (
                "üìÖ <b>–í–≤–æ–¥ –¥–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.08.2024\n\n"
                "‚ö†Ô∏è <b>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏.</b>"
            )
            
            return 'enter_dates', text, markup
        
        elif message.text == "üè® –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–æ–º–µ—Ä–∞
            user_state.current_step = 'select_room'
            user_state.registration_data.pop('date_conflict', None)  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            user_state.registration_data.pop('room', None)  # –£–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
            user_state.registration_data.pop('start_date', None)  # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—ã
            user_state.registration_data.pop('end_date', None)
            user_state.registration_data.pop('date_range', None)
            
            building = user_state.registration_data.get('building', '')
            if building:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ
                rooms = self.get_rooms_in_building(building)
                if rooms:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    for room in rooms:
                        markup.add(types.KeyboardButton(room))
                    markup.add(types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–ø—É—Å–∞–º"))
                    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
                    
                    text = (
                        f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å: <b>{building}</b>\n\n"
                        "–®–∞–≥ 1 –∏–∑ 6: –í—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –∫–æ—Ä–ø—É—Å–µ {building}:"
                    )
                    
                    return 'select_room', text, markup
            
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
            return self.step_start(message, user_state)
        
        else:
            return 'date_conflict', "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 'üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã', 'üè® –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä' –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∞':", None
    
    def step_enter_meals_for_day(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–®–∞–≥ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        current_day_index = user_state.registration_data['current_day_index']
        date_range = user_state.registration_data['date_range']
        current_date = date_range[current_day_index]
        date_key = current_date.strftime('%Y-%m-%d')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if date_key not in user_state.registration_data['daily_meals']:
            user_state.registration_data['daily_meals'][date_key] = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É
        input_text = message.text.strip()
        
        # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "0 0 0 0 0 0", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ 0
        if input_text == "" or input_text == "0 0 0 0 0 0":
            user_state.registration_data['daily_meals'][date_key] = {
                '–∑–≤': 0, '–∑–¥': 0, '–æ–≤': 0, '–æ–¥': 0, '—É–≤': 0, '—É–¥': 0
            }
        else:
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞
                numbers = input_text.split()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª
                if len(numbers) != 6:
                    return 'enter_meals_for_day', (
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 6 —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
                        "–≤–∑—Ä–æ—Å–ª—ã–µ –∑–∞–≤—Ç—Ä–∞–∫, –¥–µ—Ç–∏ –∑–∞–≤—Ç—Ä–∞–∫, –≤–∑—Ä–æ—Å–ª—ã–µ –æ–±–µ–¥, –¥–µ—Ç–∏ –æ–±–µ–¥, –≤–∑—Ä–æ—Å–ª—ã–µ —É–∂–∏–Ω, –¥–µ—Ç–∏ —É–∂–∏–Ω\n\n"
                        "<b>–ü—Ä–∏–º–µ—Ä:</b> 2 1 2 1 2 0"
                    ), None
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                meal_counts = []
                for num_str in numbers:
                    count = int(num_str)
                    if count < 0:
                        return 'enter_meals_for_day', "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞:", None
                    meal_counts.append(count)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                user_state.registration_data['daily_meals'][date_key] = {
                    '–∑–≤': meal_counts[0],  # –≤–∑—Ä–æ—Å–ª—ã–µ –∑–∞–≤—Ç—Ä–∞–∫
                    '–∑–¥': meal_counts[1],  # –¥–µ—Ç–∏ –∑–∞–≤—Ç—Ä–∞–∫
                    '–æ–≤': meal_counts[2],  # –≤–∑—Ä–æ—Å–ª—ã–µ –æ–±–µ–¥
                    '–æ–¥': meal_counts[3],  # –¥–µ—Ç–∏ –æ–±–µ–¥
                    '—É–≤': meal_counts[4],  # –≤–∑—Ä–æ—Å–ª—ã–µ —É–∂–∏–Ω
                    '—É–¥': meal_counts[5]   # –¥–µ—Ç–∏ —É–∂–∏–Ω
                }
                
            except ValueError:
                return 'enter_meals_for_day', (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
                    "<b>–ü—Ä–∏–º–µ—Ä:</b> 2 1 2 1 2 0"
                ), None
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return self.step_next_day_or_confirm(message, user_state)
    
    def step_next_day_or_confirm(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        current_day_index = user_state.registration_data['current_day_index']
        date_range = user_state.registration_data['date_range']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–Ω–∏
        if current_day_index + 1 < len(date_range):
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
            user_state.registration_data['current_day_index'] += 1
            user_state.registration_data['current_meal_step'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
            
            next_date = date_range[current_day_index + 1]
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("0 0 0 0 0 0"))
            markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            current_date = date_range[current_day_index]
            date_key = current_date.strftime('%Y-%m-%d')
            current_day_meals = user_state.registration_data['daily_meals'][date_key]
            current_summary = (
                f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è {date_range[current_day_index].strftime('%d.%m.%Y')} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:</b>\n"
                f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫: {current_day_meals.get('–∑–≤', 0)} –≤–∑—Ä–æ—Å–ª—ã—Ö, {current_day_meals.get('–∑–¥', 0)} –¥–µ—Ç–µ–π\n"
                f"‚Ä¢ –û–±–µ–¥: {current_day_meals.get('–æ–≤', 0)} –≤–∑—Ä–æ—Å–ª—ã—Ö, {current_day_meals.get('–æ–¥', 0)} –¥–µ—Ç–µ–π\n"
                f"‚Ä¢ –£–∂–∏–Ω: {current_day_meals.get('—É–≤', 0)} –≤–∑—Ä–æ—Å–ª—ã—Ö, {current_day_meals.get('—É–¥', 0)} –¥–µ—Ç–µ–π\n\n"
            )
            
            text = (
                f"{current_summary}"
                f"üìÖ <b>–î–µ–Ω—å {current_day_index + 2} –∏–∑ {len(date_range)}</b>\n"
                f"–î–∞—Ç–∞: <b>{next_date.strftime('%d.%m.%Y')}</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è.\n\n"
                "<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:</b> 6 —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n"
                "<b>–ü–æ—Ä—è–¥–æ–∫:</b> –≤–∑—Ä–æ—Å–ª—ã–µ –∑–∞–≤—Ç—Ä–∞–∫, –¥–µ—Ç–∏ –∑–∞–≤—Ç—Ä–∞–∫, –≤–∑—Ä–æ—Å–ª—ã–µ –æ–±–µ–¥, –¥–µ—Ç–∏ –æ–±–µ–¥, –≤–∑—Ä–æ—Å–ª—ã–µ —É–∂–∏–Ω, –¥–µ—Ç–∏ —É–∂–∏–Ω\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b> 2 1 2 1 2 0\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:"
            )
            
            return 'enter_meals_for_day', text, markup
        else:
            # –í—Å–µ –¥–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            return self.step_confirm_registration(message, user_state)
    
    def step_confirm_registration(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–®–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        data = user_state.registration_data
        daily_meals = data['daily_meals']
        date_range = data['date_range']
        
        summary = (
            "üìã <b>–°–≤–æ–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n\n"
            f"üè® –ù–æ–º–µ—Ä: <b>{data['room']}</b>\n"
            f"üë§ –ò–º—è: <b>{data['name']}</b>\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: <b>{data['start_date'].strftime('%d.%m.%Y')} - {data['end_date'].strftime('%d.%m.%Y')}</b>\n"
            f"üìä –î–Ω–µ–π: <b>{len(date_range)}</b>\n\n"
            "üçΩÔ∏è <b>–ü–∏—Ç–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for i, date in enumerate(date_range, 1):
            date_key = date.strftime('%Y-%m-%d')
            day_meals = daily_meals.get(date_key, {})
            
            summary += (
                f"\nüìÖ <b>–î–µ–Ω—å {i} ({date.strftime('%d.%m.%Y')}):</b>\n"
                f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫: {day_meals.get('–∑–≤', 0)} –≤–∑—Ä–æ—Å–ª—ã—Ö, {day_meals.get('–∑–¥', 0)} –¥–µ—Ç–µ–π\n"
                f"‚Ä¢ –û–±–µ–¥: {day_meals.get('–æ–≤', 0)} –≤–∑—Ä–æ—Å–ª—ã—Ö, {day_meals.get('–æ–¥', 0)} –¥–µ—Ç–µ–π\n"
                f"‚Ä¢ –£–∂–∏–Ω: {day_meals.get('—É–≤', 0)} –≤–∑—Ä–æ—Å–ª—ã—Ö, {day_meals.get('—É–¥', 0)} –¥–µ—Ç–µ–π\n"
            )
        
        summary += "\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:"
        
        user_state.current_step = 'complete'
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"))
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        return 'complete', summary, markup
    
    def step_complete(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —à–∞–≥ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"step_complete –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '{message.text}'")
        
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            logger.info("–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return 'cancel', "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", None
        
        if message.text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
            logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ step_complete: '{message.text}'")
            return 'complete', "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∞':", None
        
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            success = self.save_registration_data(user_state.registration_data)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {success}")
            
            if success:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
                markup.add(types.KeyboardButton("üìä –¢–∞–±–ª–∏—Ü—ã –ë–î"))
                markup.add(types.KeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞"))
                
                text = (
                    "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìä –¢–∞–±–ª–∏—Ü—ã –ë–î'.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
                
                return 'success', text, markup
            else:
                return 'error', "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return 'error', "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", None
    
    def save_registration_data(self, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑—É –∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        try:
            if db_manager.demo_mode:
                logger.info("–î–µ–º–æ-—Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            room = data['room']
            name = data['name']
            date_range = data['date_range']
            daily_meals = data['daily_meals']
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: –∫–æ–º–Ω–∞—Ç–∞={room}, –∏–º—è={name}")
            logger.info(f"–¢–∏–ø date_range: {type(date_range)}")
            logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç: {len(date_range)}")
            logger.info(f"–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞: {date_range[0]} (—Ç–∏–ø: {type(date_range[0])})")
            logger.info(f"–¢–∏–ø daily_meals: {type(daily_meals)}")
            logger.info(f"–ö–ª—é—á–∏ daily_meals: {list(daily_meals.keys())}")
            
            saved_count = 0
            skipped_count = 0
            backup_records = []  # –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
            for date in date_range:
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É: {date} (—Ç–∏–ø: {type(date)})")
                try:
                    date_key = date.strftime('%Y-%m-%d')
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∫–ª—é—á –¥–∞—Ç—ã: {date_key}")
                except AttributeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –¥–∞—Ç—ã: {e}")
                    logger.error(f"–î–∞—Ç–∞: {date}, —Ç–∏–ø: {type(date)}")
                    raise e
                
                day_meals = daily_meals.get(date_key, {})
                logger.info(f"–î–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è {date_key}: {day_meals}")
                
                record = {
                    '–Ω–æ–º–µ—Ä': room,
                    '–¥–∞—Ç–∞': date_key,
                    '–§–ò–û': name,
                    '–∑–¥': day_meals.get('–∑–¥', 0),
                    '–∑–≤': day_meals.get('–∑–≤', 0),
                    '–æ–¥': day_meals.get('–æ–¥', 0),
                    '–æ–≤': day_meals.get('–æ–≤', 0),
                    '—É–¥': day_meals.get('—É–¥', 0),
                    '—É–≤': day_meals.get('—É–≤', 0)
                }
                
                try:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
                    result = db_manager.insert_record('–ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏', record)
                    if result > 0:  # –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞
                        saved_count += 1
                        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è {room}, {date_key}, {name}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                        backup_records.append(record)
                    else:
                        logger.warning(f"–ó–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è {room}, {date_key}, {name}")
                        
                except Exception as insert_error:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    error_msg = str(insert_error).lower()
                    if 'duplicate' in error_msg or 'unique' in error_msg or 'already exists' in error_msg:
                        logger.warning(f"–ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {room}, {date_key}, {name}")
                        skipped_count += 1
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        logger.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è {room}, {date_key}, {name}: {insert_error}")
                        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ SQLite3 (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)
            if backup_records:
                try:
                    backup_path = sqlite_backup_manager.create_backup()
                    if backup_path:
                        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
                except Exception as backup_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {backup_error}")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if saved_count > 0:
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {name}")
                if skipped_count > 0:
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
                return True
            elif skipped_count > 0:
                logger.warning(f"–í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count})")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å–∏ —É–∂–µ –µ—Å—Ç—å
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {name}")
                return False
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def process_step(self, message, user_state) -> tuple[str, str, types.ReplyKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        current_step = user_state.current_step
        
        if current_step in self.registration_steps:
            return self.registration_steps[current_step](message, user_state)
        else:
            return 'error', "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", None


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_manager = RegistrationManager()
