#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os
from database import db_manager
from sqlite_backup import sqlite_backup_manager

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite3...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not db_manager.is_connected():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        tables = db_manager.get_tables()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        for table in tables:
            print(f"  - {table}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü
        print("\nüìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü:")
        
        for table in tables:
            row_count = db_manager.get_table_row_count(table)
            print(f"  üìã {table}: {row_count} –∑–∞–ø–∏—Å–µ–π")
            
            if row_count > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                sample_data = db_manager.get_table_data(table, 3)
                print(f"    –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
                for i, record in enumerate(sample_data, 1):
                    print(f"      {i}. {record}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        print("\nüíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:")
        backup_info = sqlite_backup_manager.get_backup_info()
        print(f"  üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {backup_info['backup_dir']}")
        print(f"  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π: {backup_info['backup_count']}")
        print(f"  üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {backup_info['total_size_mb']} –ú–ë")
        
        if backup_info['latest_backup']:
            print(f"  üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ø–∏—è: {backup_info['latest_backup']['created']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        test_rooms = ["–∫1/1", "–∫1/2", "–∫2/1", "–ë1/1", "–ë1/2", "–ë2/1", "–ë2/2"]
        
        for room in test_rooms:
            try:
                db_manager.insert_record("—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫_–Ω–æ–º–µ—Ä–æ–≤", {"–Ω–æ–º–µ—Ä": room})
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä: {room}")
            except Exception as e:
                if "UNIQUE constraint failed" in str(e):
                    print(f"  ‚ö†Ô∏è –ù–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {room}")
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ {room}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
        test_visitors = [
            {
                "–Ω–æ–º–µ—Ä": "–∫1/1",
                "–¥–∞—Ç–∞": "2024-08-25",
                "–§–ò–û": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                "–∑–¥": 0, "–∑–≤": 2, "–æ–¥": 0, "–æ–≤": 2, "—É–¥": 0, "—É–≤": 2
            },
            {
                "–Ω–æ–º–µ—Ä": "–∫1/2",
                "–¥–∞—Ç–∞": "2024-08-26",
                "–§–ò–û": "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á",
                "–∑–¥": 1, "–∑–≤": 1, "–æ–¥": 1, "–æ–≤": 1, "—É–¥": 1, "—É–≤": 1
            }
        ]
        
        for visitor in test_visitors:
            try:
                db_manager.insert_record("–ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏", visitor)
                print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å: {visitor['–§–ò–û']} - {visitor['–Ω–æ–º–µ—Ä']} - {visitor['–¥–∞—Ç–∞']}")
            except Exception as e:
                if "UNIQUE constraint failed" in str(e):
                    print(f"  ‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {visitor['–§–ò–û']} - {visitor['–Ω–æ–º–µ—Ä']} - {visitor['–¥–∞—Ç–∞']}")
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è: {e}")
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    print("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    try:
        backup_path = sqlite_backup_manager.create_backup()
        if backup_path:
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 50)
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite3")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not check_database():
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–ª–∞")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\n" + "=" * 50)
    response = input("–•–æ—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏? (y/n): ").lower().strip()
    
    if response in ['y', 'yes', '–¥–∞', '–¥']:
        if initialize_database():
            print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if create_backup():
                print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚è≠Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
